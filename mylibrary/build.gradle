plugins {
    id 'com.android.library'
}

android {
    namespace 'com.wjs.android.mylibrary'
    compileSdk 32

    defaultConfig {
        minSdk 28
        targetSdk 32

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lint {
        baseline = file("lint-baseline.xml")
    }
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.4.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}


// Copy类型
task makeJar(type: Copy) {
    def _BASENAME = 'appsdk';
    def _VERSION = '_V1.0_';
    def _RELEASE_TIME = new Date().format("yyyyMMddHHmmss", TimeZone.getTimeZone("GMT+08:00"));
    def _NAME = _BASENAME + _VERSION + _RELEASE_TIME + '.jar';
    //生成jar包的位置
    def _DestinationPath = 'build/libs/';

    // 删除存在的 jar 包
    delete _DestinationPath
    // 设置拷贝的文件
    from('build/intermediates/aar_main_jar/release/')
    // 打进jar包后的文件目录
    into(_DestinationPath)
    // 将classes.jar放入build/libs/目录下
    // include ,exclude 参数来设置过滤
    //（我们只关心classes.jar这个文件）
    include('classes.jar')
    // 重命名
    rename('classes.jar', _NAME)
}

makeJar.dependsOn(build)